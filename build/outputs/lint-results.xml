<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 23.0.2">

    <issue
        id="AppCompatMethod"
        severity="Warning"
        message="Should use getSupportActionBar instead of getActionBar name"
        category="Correctness"
        priority="6"
        summary="Finds cases where a custom `appcompat` method should be used instead"
        explanation="When using the appcompat library, there are some methods you should be calling instead of the normal ones; for example, `getSupportActionBar()` instead of `getActionBar()`. This lint check looks for calls to the wrong method."
        url="http://developer.android.com/tools/support-library/index.html"
        urls="http://developer.android.com/tools/support-library/index.html"
        errorLine1="        actionBar = getActionBar();"
        errorLine2="                    ~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/src/com/android/potlach/ui/MainActivity.java"
            line="115"
            column="21"/>
    </issue>

    <issue
        id="AppCompatMethod"
        severity="Warning"
        message="Should use getSupportActionBar instead of getActionBar name"
        category="Correctness"
        priority="6"
        summary="Finds cases where a custom `appcompat` method should be used instead"
        explanation="When using the appcompat library, there are some methods you should be calling instead of the normal ones; for example, `getSupportActionBar()` instead of `getActionBar()`. This lint check looks for calls to the wrong method."
        url="http://developer.android.com/tools/support-library/index.html"
        urls="http://developer.android.com/tools/support-library/index.html"
        errorLine1="  ActionBar actionBar = getActionBar();"
        errorLine2="                        ~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/src/com/android/potlach/ui/SearchResultsActivity.java"
            line="21"
            column="25"/>
    </issue>

    <issue
        id="AppCompatMethod"
        severity="Warning"
        message="Should use getSupportActionBar instead of getActionBar name"
        category="Correctness"
        priority="6"
        summary="Finds cases where a custom `appcompat` method should be used instead"
        explanation="When using the appcompat library, there are some methods you should be calling instead of the normal ones; for example, `getSupportActionBar()` instead of `getActionBar()`. This lint check looks for calls to the wrong method."
        url="http://developer.android.com/tools/support-library/index.html"
        urls="http://developer.android.com/tools/support-library/index.html"
        errorLine1="            getActionBar().setTitle(gift.getTitle());"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/src/com/android/potlach/ui/ViewGiftActivity.java"
            line="85"
            column="13"/>
    </issue>

    <issue
        id="GradleDeprecated"
        severity="Warning"
        message="&apos;android&apos; is deprecated; use &apos;com.android.application&apos; instead"
        category="Correctness"
        priority="6"
        summary="Looks for deprecated Gradle constructs"
        explanation="This detector looks for deprecated Gradle constructs which currently work but will likely stop working in a future update."
        errorLine1="apply plugin: &apos;android&apos;"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/build.gradle"
            line="10"
            column="1"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Checks that the manifest specifies a targetSdkVersion that is recent"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        android:targetSdkVersion=&quot;18&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/AndroidManifest.xml"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Ensures that a proper parent context is passed to a layout inflater"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="            grid = inflater.inflate(R.layout.gift_single, null);"
        errorLine2="                                                          ~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/src/com/android/potlach/ui/adapter/GiftGridAdapter.java"
            line="56"
            column="59"/>
    </issue>

    <issue
        id="UnknownIdInLayout"
        severity="Warning"
        message="The id &quot;linearButton&quot; is not referring to any views in this layout"
        category="Correctness"
        priority="5"
        summary="Makes sure that @+id references refer to views in the same layout"
        explanation="The `@+id/` syntax refers to an existing id, or creates a new one if it has not already been defined elsewhere. However, this means that if you have a typo in your reference, or if the referred view no longer exists, you do not get a warning since the id will be created on demand.

This is sometimes intentional, for example where you are referring to a view which is provided in a different layout via an include. However, it is usually an accident where you have a typo or you have renamed a view without updating all the references to it."
        errorLine1="        android:layout_above=&quot;@+id/linearButton&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_view_gift.xml"
            line="23"
            column="9"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support:appcompat-v7 than 19.1.+ is available: 21.0.0"
        category="Correctness"
        priority="4"
        summary="Looks for old or obsolete Gradle library dependencies"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    compile &apos;com.android.support:appcompat-v7:19.1+&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/build.gradle"
            line="14"
            column="5"/>
    </issue>

    <issue
        id="GradleDynamicVersion"
        severity="Warning"
        message="Avoid using + in version numbers; can lead to unpredictable and unrepeatable builds (com.android.support:appcompat-v7:19.1+)"
        category="Correctness"
        priority="4"
        summary="Looks for dependencies using a dynamic version rather than a fixed version"
        explanation="Using `+` in dependencies lets you automatically pick up the latest available version rather than a specific, named version. However, this is not recommended; your builds are not repeatable; you may have tested with a slightly different version than what the build server used. (Using a dynamic version as the major version number is more problematic than using it in the minor version position.)"
        errorLine1="    compile &apos;com.android.support:appcompat-v7:19.1+&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/build.gradle"
            line="14"
            column="5"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;sp&quot; instead of &quot;dp&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Looks for uses of `dp` instead of `sp` dimensions for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="        android:textSize=&quot;12dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_splash_screen.xml"
            line="17"
            column="9"/>
    </issue>

    <issue
        id="ExportedService"
        severity="Warning"
        message="Exported service does not require permission"
        category="Security"
        priority="5"
        summary="Checks for exported services that do not require permissions"
        explanation="Exported services (services which either set `exported=true` or contain an intent-filter and do not specify `exported=false`) should define a permission that an entity must have in order to launch the service or bind to it. Without this, any application can use this service."
        errorLine1="        &lt;service android:name=&quot;.security.PotlachAuthenticatorService&quot; >"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/AndroidManifest.xml"
            line="118"
            column="9"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one &lt;TextView/> and a compound drawable"
        category="Performance"
        priority="6"
        summary="Checks whether the current node can be replaced by a `TextView` using compound drawables."
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).

If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.

There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="        &lt;LinearLayout"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_view_gift.xml"
            line="28"
            column="9"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/purple with a theme that also paints a background (inferred theme is @android:style/Theme.Holo)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="    android:background=&quot;@color/purple&quot; >"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_splash_screen.xml"
            line="4"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/dark_gray with a theme that also paints a background (inferred theme is @android:style/Theme.Holo)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="    android:background=&quot;@color/dark_gray&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/gift_single.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.white appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;white&quot;>#FFFFFF&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="4"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.yellow appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;yellow&quot;>#FFFF00&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="5"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.fuchsia appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;fuchsia&quot;>#FF00FF&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="6"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.red appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;red&quot;>#FF0000&lt;/color>"
        errorLine2="           ~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="7"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.silver appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;silver&quot;>#C0C0C0&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="8"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.olive appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;olive&quot;>#808000&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="10"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.maroon appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;maroon&quot;>#800000&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="12"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.aqua appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;aqua&quot;>#00FFFF&lt;/color>"
        errorLine2="           ~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="13"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.lime appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;lime&quot;>#00FF00&lt;/color>"
        errorLine2="           ~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="14"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.teal appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;teal&quot;>#008080&lt;/color>"
        errorLine2="           ~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="15"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.green appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;green&quot;>#008000&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="16"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.blue appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;blue&quot;>#0000FF&lt;/color>"
        errorLine2="           ~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="17"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.navy appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;navy&quot;>#000080&lt;/color>"
        errorLine2="           ~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="18"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.color.black appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;black&quot;>#000000&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/colors.xml"
            line="19"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.dimen.activity_horizontal_margin appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;dimen name=&quot;activity_horizontal_margin&quot;>16dp&lt;/dimen>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/dimens.xml"
            line="3"
            column="12"/>
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values-w820dp/dimens.xml"
            line="5"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.dimen.activity_vertical_margin appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;dimen name=&quot;activity_vertical_margin&quot;>16dp&lt;/dimen>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/dimens.xml"
            line="4"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.layout.gifts_grid appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/gifts_grid.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.string.hello_world appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;hello_world&quot;>Hello world!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/strings.xml"
            line="16"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.string.title_activity_splash_screen appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;title_activity_splash_screen&quot;>SplashScreenActivity&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/values/strings.xml"
            line="26"
            column="13"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an inputType or a hint"
        category="Usability"
        priority="5"
        summary="Looks for text fields missing `inputType` or `hint` settings"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="        &lt;EditText"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_create_gift.xml"
            line="31"
            column="9"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an inputType or a hint"
        category="Usability"
        priority="5"
        summary="Looks for text fields missing `inputType` or `hint` settings"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="        &lt;EditText"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_create_gift.xml"
            line="44"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_create_gift.xml"
            line="81"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_splash_screen.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView"
        errorLine2="            ^"
        quickfix="studio,adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_view_gift.xml"
            line="35"
            column="13"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_view_gift.xml"
            line="72"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/gift_single.xml"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Gift Image&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:contentDescription=&quot;Gift Image&quot;/>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_create_gift.xml"
            line="12"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Title&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Title&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_create_gift.xml"
            line="27"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Description&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Description&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_create_gift.xml"
            line="40"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Gift Chain&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Gift Chain&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_create_gift.xml"
            line="52"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Upload Gift&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Upload Gift&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_create_gift.xml"
            line="89"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Email address&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:hint=&quot;Email address&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_login.xml"
            line="12"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Password&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:hint=&quot;Password&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_login.xml"
            line="22"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Sign in&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Sign in&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_login.xml"
            line="30"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;New user?&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;New user?&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_login.xml"
            line="37"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Username&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:hint=&quot;Username&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_register.xml"
            line="13"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Password&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:hint=&quot;Password&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_register.xml"
            line="23"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Create Account&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Create Account&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_register.xml"
            line="31"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Already a member?&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Already a member?&quot;/>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_register.xml"
            line="40"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;www.androidhive.info&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;www.androidhive.info&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_splash_screen.xml"
            line="21"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Gift Image&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:contentDescription=&quot;Gift Image&quot;/>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_view_gift.xml"
            line="13"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Text&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Text&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_view_gift.xml"
            line="51"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Touch&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Touch&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_view_gift.xml"
            line="80"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Top Gift givers&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Top Gift givers&quot;/>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/fragment_top_gift_givers.xml"
            line="12"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;end&quot; instead of &quot;right&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_gravity=&quot;right&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_create_gift.xml"
            line="29"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;end&quot; instead of &quot;right&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:gravity=&quot;right&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/res/layout/activity_view_gift.xml"
            line="31"
            column="13"/>
    </issue>

    <issue
        id="RtlEnabled"
        severity="Warning"
        message="The project references RTL attributes, but does not explicitly enable or disable RTL support with android:supportsRtl in the manifest"
        category="Bi-directional Text"
        priority="3"
        summary="Looks for usages of right-to-left text constants without enabling RTL support"
        explanation="To enable right-to-left support, when running on API 17 and higher, you must set the `android:supportsRtl` attribute in the manifest `&lt;application>` element.
If you have started adding RTL attributes, but have not yet finished the migration, you can set the attribute to false to satisfy this lint check.">
        <location
            file="/Users/diyanfilipov/dev/eclipseWorkspace/Potlach/AndroidManifest.xml"/>
    </issue>

</issues>
